# Copyright The OpenTelemetry Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# sitecustomize.py は実行されるらしい。勝手に
# 知らんよ...

from logging import getLogger
from os import environ
from os.path import abspath, dirname, pathsep

# うーん、ここで _load が import されるとその中で pkg_resources が import されてるから
# @call_aside 関数が実行されているっていう理解でいいのだろうか？ただ、ここではそれだけ。。。(まぁ、これでいいか)
from opentelemetry.instrumentation.auto_instrumentation._load import (
    _load_configurators,
    _load_distro,
    _load_instrumentors,
)

from opentelemetry.instrumentation.utils import _python_path_without_directory

logger = getLogger(__name__)


def initialize():
    # prevents auto-instrumentation of subprocesses if code execs another python process
    environ["PYTHONPATH"] = _python_path_without_directory(
        environ["PYTHONPATH"], dirname(abspath(__file__)), pathsep
    )
    print("=== environ['PYTHONPATH'] は ", environ["PYTHONPATH"])
    # /Users/zuck3rx/git/event/cndt2023-demo/misk/research-python が設定される

    try:
        # ここで色々 load しているな...
        
        # load されることにより、BaseDistro Class として、OpenTelemetryDistro がインスタンス化される
        distro = _load_distro()
        print("=== load して返される distro は ", distro) # opentelemetry.distro.OpenTelemetryDistro
        # OpenTelemetryDistro の _configure を実行して、環境変数
        # OTEL_TRACES_EXPORTER, OTEL_METRICS_EXPORTER, OTEL_EXPORTER_OTLP_PROTOCOL を設定しているっぽい
        distro.configure()
        
        # opentelemetry_configurator group に属するエントリーポイント追加
        # これ OpenTelemetryConfiguraor っていうクラスが SDK のクラスを継承していて、ここで各種プロバイダーを設定してる肝部分だった
        _load_configurators()
        
        # opentelemetry_instrumentor group に属するエントリポイント追加
        _load_instrumentors(distro) # flask とかで instrument() している...
        
        print("🌴🌴🌴 Auto initialize opentelemetry secceeded")
    except Exception:  # pylint: disable=broad-except
        logger.exception("Failed to auto initialize opentelemetry")

print(" \n")
print("⭐️⭐️⭐️ プロセスの再起動がトリガーとなり、sitecustomize.py が実行される。これが自動計装の真骨頂！！！！")
print("😡😡😡 ここで sitecusomize.py の initialize() が実行開始")
initialize()
print("😡😡😡 ここで sitecusomize.py の initialize() が実行終了")
print("\n")
print("✨✨✨ 以降は、各 Instrumentor の中の処理に入っていく。。")
print("✨✨✨ 正確には、アプリロジック側で生成する各ライブラリのオブジェクトはすでに計装されたもの。")
print("✨✨✨ それを使うことで、色々な Hook により計装処理が施されていくような仕組み")
print("\n")
### ここまでが opentelemetry-instrument の領域。これ以降は
### これ以降は 各 Instrumentor の領域。プログラム内で import したときと同様な感じになりそう...